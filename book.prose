PROSE 10683

= Extracting Components

PROSE 9172

This exercise involves refactoring existing code by extracting a component.

PROSE 9016

Extracting components is an essential part of a React developer's toolkit. It's a task that React developers routinely perform on a daily basis.

PROSE 9392

Components should perform a single responsibility because it makes them more readable, extensible, and composable. If a component has multiple responsibilities, it's usually a good idea to split it into multiple components.

PROSE 9506

Developers should be able to demonstrate proficiency at extracting components. They should also understand the benefits of extracting components from existing code.

PROSE 8995

2 out of 10

PROSE 8963

Extracting components entails removing some markup and related state from one component and encapsulating it a new component.

Component extraction is based on the Extract Function design pattern. You can read more about that pattern at https://refactoring.com/catalog/extractFunction.html.

Extracting components improves your code in the following ways.

- It simplifies the original component
- It increases reuse by extracting a more general component that can be used by other components
- It reduces copy and pasting of code

_Ideally, a React component's markup should only call other components_ because doing so increases the readability of the original component. It also results in simpler, more understandable, and more extensible, components.

Markup that does not merely use other components resembles HTML. Markup that resembles HTML is more difficult to read, understand, modify, and extend, than markup that exclusively invokes other components. You will see evidence of the stark contrast in readability between markup that is restricted to invoking other components versus markup that resembles HTML in this coding exercise.

Of course, at some point you must resort to markup that does not merely use other components, but instead resembles HTML. That type of markup should be restricted to "leaf" components. A _leaf component_ is a simple component that encapsulates a small bit of HTML functionality. The component that we extract in this exercise is a leaf component.

In addition to simplifying the original component, extracting components produces more general components that in turn can be used by other components. As you implement React applications, you should strive to continually implement "UI" components. A _UI component_ is a component that is divorced from any domain specific knowledge and encapsulates a small bit of HTML functionality.

Most UI components will be leaf components whose markup resembles HTML. As a result, it is important to restrict UI components to one small piece of functionality that can easily be used by other, presumably domain-specific, components, although some UI components may be composed of other UI components that are not domain specific. In general, you should strive to implement as many general, reusable UI components as you can as those components will make future development much easier.

Finally, extracting components will reduce the amount of copying and pasting that you perform between components to a bare minimum. Copying and pasting is a violation of the DRY (Don't Repeat Yourself) pattern and results in inconsistencies and bugs in your code. Ideally, you should not paste any code whatsover between your React components.

PROSE 9363

The starting point for the Extract Component exercise is shown in the following figure.

PROSE 9431

The solution for the Extract Component exercise is shown in the following figure.

PROSE 9465

The only visible difference between the starting point and the solution in the preceding screenshots is the value displayed when the user selects an item from the dropdown list.

PROSE 8923

The code for the exercise's starting point is shown in the following listing.

PROSE 9562

The preceding code is a simple component with a dropdown list of users. The component also displays the index of the currently selected item from the dropdown.

The goal of the exercise is to extract the code for the dropdown into a Dropdown component. The Dropdown component is a general component that can be used for any list of JavaScript objects.

The exercise also contains an additional twist: You must show the name of the user selected in the dropdown, instead of the index. 

Notice that it takes some time to understand the markup in the preceding listing that creates the dropdown menu. That markup consists of a select element that contains option elements. The options are created by iterating over an array of JavaScript objects and creating a corresponding option element for each item in the array.

You cannot merely glance at the Solution component's markup and immediately understand what it does. You have to grok the elements and how they are created, in addition to understanding that the select element has an onChange event handler that React invokes when the user selects an item from the dropdown. It's less than 15 lines of JSX overall, but it will still take the average React developer a minute or so to understand exactly how it works. That minute or so is not a big deal, but in the real world, the markup for most React domain-specific components can easily include 10 or more such markup segments, which exponentially increases the amount of time it takes to understand the code. Maintaing and updating code like that is a chore. Let's see how we can use the Extract Component pattern to reduce that burden.

The pertinent CSS is shown in the following listing. Note that the custom-select CSS class used above is from Bootstrap.

.selected-user {
&nbsp;&nbsp;margin-bottom: 1em;
}

.dropdown-label {
&nbsp;&nbsp;margin-right: 1em;
}

PROSE 8913

The first thing to notice about the previous listing is that the markup for the Solution component is much easer to understand than the original version. It's immediately apparent that the application displays the selected user and provides a dropdown whose items are the ones in the users array.

The previous listing also shows the name of the selected user instead of the selected index with the getUsername() function.

PROSE 9821

The markup for the Solution component does not provide any clues as to how the Dropdown component is implemented. For that, you must look at the component's implementation, which is shown in the following listing.

PROSE 9763

The Dropdown component has the following props.

* +label+ The label for the dropdown
* +items+ The items displayed in the dropdown
* +value+ The current selected value
* +valueProperty+ The name of the property used to store the value
* +displayProperty+ The name of the property used to display the currently selected valoue
* +width+ The width of the component

The Dropdown component can be used for any array of JavaScript objects because it uses the valueProperty and displayProperty props to access the value stored in the dropdown and the displayed value, respectively. Users of the Dropdown component can also specify the width of the dropdown with the width prop.

The Dropdown component is useful for the following reasons

* It makes it easy to create a dropdown
* The Dropdown component can be reused many times by different types of components
* It eliminates the need to manually map over an array of JavaScript objects to create the options
* It automatically assigns a key property to each item. This is something that is often overlooked, even by experienced React developers.

PROSE 9284

Components that have multiple responsibilites are hard to read and extend; therefore, it's best to limit components to a single responsibility as much as possible.

During development, it's convenient to put several responsibilites in a single component, but after that functionality is working, you should extract components to reduce the number of responsibilites per component.

Extracting components makes your overall codebase more readable, extensible, and composable. Extracted components are often UI components, which are more reusable than domain-specific components.

END_PROSE
