= The Exercise Application



This chapter discusses the Exercise application itself, so you can see how to implement the rest of the book's exercises.



To implement an exercise, you'll only edit `Start.js` files, but it's good to know how this simple application is implemented. We will also explore few elementary best practices along the way.



For the sake of illustration, let's assume we have an exercise as shown below.



[[9433]]
.The Starting Point
image::assets/images/exercise-application/start.png[width=700]
The goal of the exercise is to echo the contents of the text field as the user types. Notice the `Show Solution` button, whose CSS makes it look more like text instead of a button.



Every exercise contains a textual description, but the `Show Solution` button lets you take a look at how the solution behaves.



If you click on the `Show Solution` button, the exercise application swaps out a `Start` component for a `Solution` component, and the text of the button changes to `Hide Solution`, as shown below.



[[9575]]
.The Solution
image::assets/images/exercise-application/solution.png[width=700]
The goal of this exercise is to demonstrate proficiency with simple state management in React.



With that simple example in mind, let's look at the components in the Exercise application.



[[7763]]
The Code  (7763)
~~~~~~~~~~~~~~~~
The Instructions component contains the exercise instructions, while the InstructionsIcon component displays an icon next to the instructions. The InstructionsText component contains the actual text of the instructions. The Start component displays a button that the user can click to start the exercise, while the Solution component displays the solution code when the user clicks a button. Finally, the App component is the top-level component that renders all of the other components.



The Instructions component displays the title of the exercise, a set of instructions for the user, and a button to toggle the display of the solution. When the user clicks the button, the state of the `solutionVisible` variable changes, which controls whether the Solution or Start component is displayed.



The Start component is where you perform the exercise. It is hidden when the `solutionVisible` variable is true.



The Solution component displays the solution to the exercise, which is shown when the `solutionVisible` variable is true. 



All of these components are used in the main `App` component, which uses the `useState` hook to manage the state of the `solutionVisible` variable.



When the user interacts with the application by entering text into the input field or clicking the toggle button, the state changes, which in turn causes the components to re-render and update the display accordingly.



// The App Component

[[8795]]
The `App` Component  (8795)
~~~~~~~~~~~~~~~~~~~~~~~~~~~
The `App` component is a functional component that implements an interactive exercise. The component uses the `useState` hook from the React library to manage the visibility of the solution.

The component has three child components: Instructions, Start, and Solution. The Instructions component displays the title of the exercise and a button to toggle the visibility of the solution.

The main content of the exercise is displayed in the `work-area` div. Depending on the value of `solutionVisible`, either the Solution component or the Start component is displayed.

Finally, the component is exported as the default export.



// After the App Component

[[9447]]

.The App Component
==============================
-----
import {useState} from 'react'

import Instructions from './Instructions'
import Start from './Start'
import Solution from './Solution'

const App = () => {
  const [solutionVisible, setSolutionVisible] = useState(false)

  return (
    <div className='app'>
      <Instructions
        onClick={() => setSolutionVisible(!solutionVisible)}
        title='Exercise Title'
        buttonText={solutionVisible ?  'Hide Solution' : 'Show Solution' }
      />

      <div className='work-area'>
        { solutionVisible ? <Solution /> : <Start /> }
      </div>
    </div>
  )
}

export default App

----
==============================
// The Instructions Component

[[9506]]
The `Instructions` Component  (9506)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The Instructions component displays exercise instructions. The component is optimized using the React.memo higher-order component, which helps prevent unnecessary re-renders of the component.



The component receives the following props from its parent component:



	- `onClick` A callback function that will be executed when the button in the component is clicked.

	- `title` The title of the exercise.

	- `buttonText` The text displayed on the button.



The component displays a card with an icon, the title of the exercise, and the instructions text. The instructions text is displayed in a separate component, InstructionsText and the icon is also displayed in a separate component, InstructionsIcon.



When the button in the component is clicked, the `onClick` prop is executed, which will toggle the visibility of the solution in the parent component.

When the user clicks on the span in the Instructions component's footer, React invokes the `onClick` callback which toggles the value of `solutionVisible`, which updates the visibility of the solution.



[[9915]]

.The Instructions Component
==============================
-----
import React from 'react'
import InstructionsIcon from './InstructionsIcon'
import InstructionsText from './InstructionsText'

const Instructions = ({
  title,
  buttonText}) =>
    <div className="instructions-container center-text fadein">
      <div className="card instructions-card card-icon">
        <div className="card-body-icon">
          <div className="text-center card-title card-icon-title">
              <div>
                <span className="card-icon-dot"></span>
              </div>

              <InstructionsIcon />

              <h4 className="card-icon-title">
                {title}
              </h4>
          </div>
          <div className="card-text card-icon-text">
              <InstructionsText />
          </div>
        </div>

        <div className="card-footer">
          <span className="stretched-link btn btn-link btn-block fadein pointer">
              {buttonText}
          </span>
        </div>
      </div>
    </div>

export default Instructions
----
==============================
Next, let's look at the InstructionsIcon component.



[[9545]]
The `InstructionsIcon` Component  (9545)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The InstructionsIcon component displays a Plus icon using the FaPlus icon from the react-icons/fa library. The icon's class name is specified with the `className` prop.



[[9906]]

.The InstructionsIcon Component
==============================
-----
import React from 'react'
import { FaPlus } from 'react-icons/fa'

const InstructionsIcon = () =>
  <FaPlus
    className="title-dot-icon"
    style={{ display: 'inline' }}
  />

export default InstructionsIcon
----
==============================
Next, let's look at the InstructionsIcon component.



[[9625]]
The `InstructionsText` Component  (9625)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The InstructionsText component displays the instructions for the exercise.



The instructions are stored in an array and are displayed using the `map` function to create a list of `li` elements, which fade in when the page is displayed. Each element of the instructions array is displayed as a bullet point in the list. Each li element has the class circle-li to style it as a bullet point.



[[9979]]

.The InstructionsText Component
==============================
-----
import React from 'react'

const InstructionsText = () => {
  const instructions = [
      "Show the contents of the textfield as the user types",
  ]

  return (
    <ul className="instructions-line fadein">
      {instructions.map(line =>
          <li className='circle-li'>{line}</li>
        )}
    </ul>
  )
}

export default InstructionsText
----
==============================
Finally, let's look at the Start and Solution components.



[[9050]]
The `Start` Component  (9050)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The Start component is the starting point for the exercise. The content of the Start component varies for each exercise.



The simple component listed below renders a text input.



[[9621]]

.The Start Component
==============================
-----
const Start = () =>
  <div>
    <input type='text'/>
  </div>

export default Start
----
==============================
The solution can be found in the Solution component.



[[9288]]
The `Solution` Component  (9288)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The Solution component, which also varies for each exercise, is the implementation of the exercise. For example, the Solution component for the preceeding Start component is listed below.





[[9773]]

.The Solution Component
==============================
-----
import React, { useState } from "react"
import "./App.css"

const Solution = () => {
  const [text, setText] = useState('')

  return (
    <>
      <div>
        <input type='text' onChange={e => setText(e.target.value)}/>
      </div>

      <div style={{marginTop: '2em'}}>
        {text}
      </div>
    </>
  )
}

export default Solution
----
==============================
The Solution component displays a text field and its contents as the user types in it. The component uses the `useState` hook to manage the state of the input text.



The component consists of two parts: an input field and a div that displays the text entered in the field. The input field has a `type` attribute set to text and an `onChange` event handler that updates the state of the text variable using the `setText` function. The value of the input field is set to text to reflect the contents of the textfield as the user types.



The second part of the component is a div that displays the contents of the text variable and is styled with a `margin-top` property set to 2em to create some vertical space between the input field and the display div.



[[9284]]
Conclusion  (9284)
~~~~~~~~~~~~~~~~~~
TBD



