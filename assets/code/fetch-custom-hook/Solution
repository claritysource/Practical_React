import React, {useRef, useState, useEffect} from 'react';
import './App.css';

const useFetch = (url) =&gt; {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [items, setItems] = useState([])

  // Called after every render when url changes
  useEffect(() =&gt; {
    let mounted = true // Must be mounted if useEffect() is called

    const fetchItems = async () =&gt; {
      const response = await fetch(url)
      const data = await response.json()

      // Only update state if mounted
      if (mounted) {
        if (!data.error) {
          setItems(data.items)
        }
        else {
          setError(data.error)
        }

        setLoading(false)
      }
    }

    if (url) {
      // Could unmount between the first line of useEffect() and here,
      // but highly unlikely
      if (mounted) {
        setLoading(true)
        fetchItems()
      }
    }

    // The return function is called before the next time the
    // effect is invoked
    return () =&gt; mounted = false
  }, [url])

  return [loading, items, error]
}

const Solution = React.memo(() =&gt; {
  const URL = 'https://www.googleapis.com/books/v1/volumes?q='
  const inputRef = useRef();
  const [query, setQuery] = useState('')
  const [url, setUrl] = useState('')
  const [loading, items, error] = useFetch(url)
  
  useEffect(() =&gt; {
    if (inputRef.current) {
      inputRef.current.focus()
    }
  }, [])

  const submitForm = e =&gt; {
    e.preventDefault()
    setUrl(prevUrl =&gt; query ? `${URL}/${query}` : '')
  }

  return (
    &lt;div&gt;
      &lt;form onSubmit={e =&gt; submitForm(e)}&gt;
        &lt;label htmlFor='query-input'&gt;Search For &lt;/label&gt;
        &lt;input
          ref={inputRef}
          type='text'
          onChange={e =&gt; setQuery(e.target.value)} id='query-input' /&gt;
      &lt;/form&gt;

      &lt;div style={{marginTop: '20px'}}&gt;
        { loading ? &lt;div&gt;Loading...&lt;/div&gt; :
          error   ? &lt;div&gt;{error.message}&lt;/div&gt; :
          items   ?
          &lt;div&gt;
            {items.map(i =&gt; 
              &lt;div key={i.id}&gt;{i.volumeInfo.title}&lt;/div&gt;
            )}
          &lt;/div&gt; : null
      }
      &lt;/div&gt;
    &lt;/div&gt;
  )
})

export default Solution;